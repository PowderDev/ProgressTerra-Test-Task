/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v3/clients/accesstoken": {
    /**
     * Создает и возвращает токен доступа клиента 
     * @description Токен доступа клиента необходимо использовать для получения любой информации о клиенте и бонусах клиента во внешнем периоде \
     * AccessToken живет TimeLiveAccessTokenClient (в секундах, указывается в appsettings)
     * При этом добавляется информация о работе с приложением с указанием гео меткки нахождения пользователя
     */
    post: {
      /**
       * Создает и возвращает токен доступа клиента 
       * @description Токен доступа клиента необходимо использовать для получения любой информации о клиенте и бонусах клиента во внешнем периоде \
       * AccessToken живет TimeLiveAccessTokenClient (в секундах, указывается в appsettings)
       * При этом добавляется информация о работе с приложением с указанием гео меткки нахождения пользователя
       */
      parameters?: {
          /** @description Ключ доступа к API */
        header?: {
          AccessKey?: string | null;
        };
      };
      /** @description Параметры по которым ищется клиент и гео данные клиента */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ClientParamJSONWhithGeo"];
          "application/json": components["schemas"]["ClientParamJSONWhithGeo"];
          "text/json": components["schemas"]["ClientParamJSONWhithGeo"];
          "application/*+json": components["schemas"]["ClientParamJSONWhithGeo"];
        };
      };
      responses: {
        /**
         * @description AccessToken клиента \
         *             В случае ошибки получения данных возвращается блок "result" \
         *             в котором "status": не равен 0. В  message указана ошибка, idLog содержит идентификатор лога на сервере
         */
        200: {
          content: {
            "application/json": components["schemas"]["ResultAuthV3"];
          };
        };
      };
    };
  };
  "/api/v3/ibonus/generalinfo/{AccessToken}": {
    /**
     * Общая информацию о бонусах клиента 
     * @description Возвращает общую информацию о бонусах клиента: \
     * Общее количетсво бонусов
     * Дату ближайшего сгорания бонусов и количество бонусов, которое сгорит в ближайшее время. \
     *  В случае ошибки получения данных возвращается блок "resultOperation"
     *  в котором "status": не равен 0. В  message указана ошибка, idLog содержит идентификатор лога на сервере
     */
    get: {
      /**
       * Общая информацию о бонусах клиента 
       * @description Возвращает общую информацию о бонусах клиента: \
       * Общее количетсво бонусов
       * Дату ближайшего сгорания бонусов и количество бонусов, которое сгорит в ближайшее время. \
       *  В случае ошибки получения данных возвращается блок "resultOperation"
       *  в котором "status": не равен 0. В  message указана ошибка, idLog содержит идентификатор лога на сервере
       */
      parameters: {
          /** @description Ключ доступа к API */
        header?: {
          AccessKey?: string;
        };
          /** @description Токен доступа клиента */
        path: {
          AccessToken: string;
        };
      };
      responses: {
        /**
         * @description Возвращает доступное количество бонусов и информацию о ближайшей дате сгорания бонусов. \
         *             В случае ошибки получения данных возвращается блок "resultOperation" \
         *             в котором "status": не равен 0. В  message указана ошибка, idLog содержит идентификатор лога на сервере
         */
        200: {
          content: {
            "application/json": components["schemas"]["InfoByAvailableBonuses"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: int32 
     * @enum {integer}
     */
    StatusResult: 0 | 1 | 2;
    ResultOperation: {
      status?: components["schemas"]["StatusResult"];
      message?: string | null;
      messageDev?: string | null;
      /** Format: int32 */
      codeResult?: number;
      /** Format: double */
      duration?: number;
      /** Format: uuid */
      idLog?: string;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    SourceQuery: 0 | 1 | 2 | 3;
    ClientParamJSONWhithGeo: {
      /** @default {ClientID} */
      idClient?: string | null;
      /** @default */
      accessToken?: Record<string, unknown> | null;
      /** @default device */
      paramName?: string | null;
      /** @default {DeviceID} */
      paramValue?: string | null;
      /** Format: float */
      latitude?: number;
      /** Format: float */
      longitude?: number;
      sourceQuery?: components["schemas"]["SourceQuery"];
    };
    ResultAuthV3: {
      result?: components["schemas"]["ResultOperation"];
      accessToken?: string | null;
    };
    DataInfoByAvailableBonuses: {
      typeBonusName?: string | null;
      /** Format: double */
      currentQuantity?: number;
      /** Format: double */
      forBurningQuantity?: number;
      /** Format: date-time */
      dateBurning?: string;
    };
    InfoByAvailableBonuses: {
      resultOperation?: components["schemas"]["ResultOperation"];
      data?: components["schemas"]["DataInfoByAvailableBonuses"];
    };
    ListInfoByAvailableBonuses: {
      resultOperation?: components["schemas"]["ResultOperation"];
      dataList?: (components["schemas"]["DataInfoByAvailableBonuses"])[] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
